//
// UptimeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UptimeAPI {

    /**
     Get uptime
     
     - parameter monitoringProfile: (query)  
     - parameter accountId: (query)  
     - returns: [UptimeItem]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getUptime(monitoringProfile: String, accountId: Double) async throws -> [UptimeItem] {
        return try await getUptimeWithRequestBuilder(monitoringProfile: monitoringProfile, accountId: accountId).execute().body
    }

    /**
     Get uptime
     - GET /uptime/
     - parameter monitoringProfile: (query)  
     - parameter accountId: (query)  
     - returns: RequestBuilder<[UptimeItem]> 
     */
    open class func getUptimeWithRequestBuilder(monitoringProfile: String, accountId: Double) -> RequestBuilder<[UptimeItem]> {
        let localVariablePath = "/uptime/"
        let localVariableURLString = plomer-swift-sdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "monitoringProfile": (wrappedValue: monitoringProfile.encodeToJSON(), isExplode: true),
            "accountId": (wrappedValue: accountId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UptimeItem]>.Type = plomer-swift-sdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}

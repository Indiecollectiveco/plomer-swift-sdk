//
// RegistrarData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** RegistrarData represents domain registration information including registrant and registrar details */
public struct RegistrarData: Codable, JSONEncodable, Hashable {

    public var id: Int
    public var accountId: Int
    public var domain: String
    public var registrarRegistrationExpirationDate: AccountCreatedAt
    public var registrantName: String
    public var registrantOrganization: String
    public var registrantEmail: String
    public var registrantPhone: String
    public var registrantStreet: String
    public var registrantCity: String
    public var registrantStateProvince: String
    public var registrantPostalCode: String
    public var registrantCountry: String
    public var registrar: String
    public var registrarWhoisServer: String
    public var registrarAbuseContactEmail: String
    public var registrarAbuseContactPhone: String
    public var reseller: String
    public var createdAt: AccountCreatedAt
    public var updatedAt: AccountCreatedAt

    public init(id: Int, accountId: Int, domain: String, registrarRegistrationExpirationDate: AccountCreatedAt, registrantName: String, registrantOrganization: String, registrantEmail: String, registrantPhone: String, registrantStreet: String, registrantCity: String, registrantStateProvince: String, registrantPostalCode: String, registrantCountry: String, registrar: String, registrarWhoisServer: String, registrarAbuseContactEmail: String, registrarAbuseContactPhone: String, reseller: String, createdAt: AccountCreatedAt, updatedAt: AccountCreatedAt) {
        self.id = id
        self.accountId = accountId
        self.domain = domain
        self.registrarRegistrationExpirationDate = registrarRegistrationExpirationDate
        self.registrantName = registrantName
        self.registrantOrganization = registrantOrganization
        self.registrantEmail = registrantEmail
        self.registrantPhone = registrantPhone
        self.registrantStreet = registrantStreet
        self.registrantCity = registrantCity
        self.registrantStateProvince = registrantStateProvince
        self.registrantPostalCode = registrantPostalCode
        self.registrantCountry = registrantCountry
        self.registrar = registrar
        self.registrarWhoisServer = registrarWhoisServer
        self.registrarAbuseContactEmail = registrarAbuseContactEmail
        self.registrarAbuseContactPhone = registrarAbuseContactPhone
        self.reseller = reseller
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case accountId
        case domain
        case registrarRegistrationExpirationDate
        case registrantName
        case registrantOrganization
        case registrantEmail
        case registrantPhone
        case registrantStreet
        case registrantCity
        case registrantStateProvince
        case registrantPostalCode
        case registrantCountry
        case registrar
        case registrarWhoisServer
        case registrarAbuseContactEmail
        case registrarAbuseContactPhone
        case reseller
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(domain, forKey: .domain)
        try container.encode(registrarRegistrationExpirationDate, forKey: .registrarRegistrationExpirationDate)
        try container.encode(registrantName, forKey: .registrantName)
        try container.encode(registrantOrganization, forKey: .registrantOrganization)
        try container.encode(registrantEmail, forKey: .registrantEmail)
        try container.encode(registrantPhone, forKey: .registrantPhone)
        try container.encode(registrantStreet, forKey: .registrantStreet)
        try container.encode(registrantCity, forKey: .registrantCity)
        try container.encode(registrantStateProvince, forKey: .registrantStateProvince)
        try container.encode(registrantPostalCode, forKey: .registrantPostalCode)
        try container.encode(registrantCountry, forKey: .registrantCountry)
        try container.encode(registrar, forKey: .registrar)
        try container.encode(registrarWhoisServer, forKey: .registrarWhoisServer)
        try container.encode(registrarAbuseContactEmail, forKey: .registrarAbuseContactEmail)
        try container.encode(registrarAbuseContactPhone, forKey: .registrarAbuseContactPhone)
        try container.encode(reseller, forKey: .reseller)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}


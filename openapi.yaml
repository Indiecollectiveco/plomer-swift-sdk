openapi: 3.0.3
info:
  title: Plomer API
  description: API for Plomer
  version: 1.0.0
  license:
    name: Plomer
    url: https://plomer.app
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AccountWithTokens:
      allOf:
        - $ref: "#/components/schemas/Account"
      type: object
      properties:
        tokens:
          $ref: "#/components/schemas/TokenResponse"
      required:
        - tokens
      description: Account with authentication tokens
    Account:
      type: object
      properties:
        id:
          type: integer
        appleId:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        enablePushNotifications:
          type: boolean
          default: false
        identityToken:
          type: string
          nullable: true
        authCode:
          type: string
          nullable: true
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - appleId
        - email
        - name
        - enablePushNotifications
        - identityToken
        - authCode
        - createdAt
        - updatedAt
      description: Account represents a user account in the system
      example:
        id: 1
        appleId: auth0|123456789
        email: user@example.com
        name: John Doe
        enablePushNotifications: true
        identityToken: some-token
        authCode: some-code
        createdAt: "2024-03-20T10:00:00.000Z"
        updatedAt: "2024-03-20T10:00:00.000Z"
    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
      required:
        - accessToken
        - refreshToken
      description: Authentication tokens
      example:
        accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    Error:
      type: object
      properties:
        error:
          type: string
      required:
        - error
      description: Error
      example:
        error: Not found
    Collection:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
          nullable: true
        accountId:
          type: integer
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - name
        - description
        - accountId
        - createdAt
        - updatedAt
      description: Collection of monitoring profiles
    CollectionWithProfiles:
      allOf:
        - $ref: "#/components/schemas/Collection"
      type: object
      properties:
        profiles:
          type: array
          items:
            $ref: "#/components/schemas/MonitoringProfile"
      required:
        - profiles
      description: Collection with its monitoring profiles
    MonitoringProfile:
      type: object
      properties:
        id:
          type: integer
        accountId:
          type: integer
        registrarDataId:
          type: integer
        contentChangeDetection:
          type: boolean
          default: false
        createdAt:
          type: string
        description:
          type: string
        domainExpiresAt:
          type: string
        domainExpiryCheck:
          type: boolean
          default: false
        healthyThresholdCount:
          type: number
          default: 3
        httpStatusChecks:
          type: boolean
          default: true
        iconUrl:
          type: string
        intervalSeconds:
          type: number
          default: 60
        isDomainExpired:
          type: boolean
          default: false
        isSslValid:
          type: boolean
          default: true
        isWebsiteReachable:
          type: boolean
          default: true
        sslExpiresAt:
          type: string
          nullable: true
        sslExpiryCheck:
          type: boolean
          default: false
        tags:
          type: array
          items:
            type: string
        timeoutSeconds:
          type: number
          default: 30
        unhealthyThresholdCount:
          type: number
          default: 3
        updatedAt:
          type: string
        url:
          type: string
          format: uri
      required:
        - id
        - accountId
        - registrarDataId
        - contentChangeDetection
        - createdAt
        - description
        - domainExpiresAt
        - domainExpiryCheck
        - healthyThresholdCount
        - httpStatusChecks
        - iconUrl
        - intervalSeconds
        - isDomainExpired
        - isSslValid
        - isWebsiteReachable
        - sslExpiryCheck
        - sslExpiresAt
        - tags
        - timeoutSeconds
        - unhealthyThresholdCount
        - updatedAt
        - url
      description: >-
        MonitoringProfile represents a website monitoring configuration with
        various health checks and thresholds
      example:
        id: 1
        accountId: 1
        contentChangeDetection: false
        createdAt: "2024-03-20T10:00:00.000Z"
        description: My Company Website Monitor
        domainExpiresAt: "2025-03-20T10:00:00.000Z"
        domainExpiryCheck: true
        healthyThresholdCount: 3
        httpStatusChecks: true
        iconUrl: https://example.com/favicon.ico
        intervalSeconds: 60
        isDomainExpired: false
        isSslValid: true
        isWebsiteReachable: true
        registrarDataId: 1
        sslExpiresAt: "2025-03-20T10:00:00.000Z"
        sslExpiryCheck: true
        tags:
          - production
          - website
        timeoutSeconds: 30
        unhealthyThresholdCount: 3
        updatedAt: "2024-03-20T10:00:00.000Z"
        url: https://example.com
    CreateCollection:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      required:
        - name
      description: Input schema for creating a new collection
    UpdateCollection:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      description: Input schema for updating a collection
    RegistrarData:
      type: object
      properties:
        id:
          type: integer
        accountId:
          type: integer
        domain:
          type: string
        registrarRegistrationExpirationDate:
          type: string
        registrantName:
          type: string
        registrantOrganization:
          type: string
        registrantEmail:
          type: string
          format: email
        registrantPhone:
          type: string
        registrantStreet:
          type: string
        registrantCity:
          type: string
        registrantStateProvince:
          type: string
        registrantPostalCode:
          type: string
        registrantCountry:
          type: string
        registrar:
          type: string
        registrarWhoisServer:
          type: string
        registrarAbuseContactEmail:
          type: string
          format: email
        registrarAbuseContactPhone:
          type: string
        reseller:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - accountId
        - domain
        - registrarRegistrationExpirationDate
        - registrantName
        - registrantOrganization
        - registrantEmail
        - registrantPhone
        - registrantStreet
        - registrantCity
        - registrantStateProvince
        - registrantPostalCode
        - registrantCountry
        - registrar
        - registrarWhoisServer
        - registrarAbuseContactEmail
        - registrarAbuseContactPhone
        - reseller
        - createdAt
        - updatedAt
      description: >-
        RegistrarData represents domain registration information including
        registrant and registrar details
      example:
        id: 1
        accountId: 1
        domain: example.com
        registrarRegistrationExpirationDate: "2025-03-20T10:00:00.000Z"
        registrantName: John Doe
        registrantOrganization: Example Corp
        registrantEmail: admin@example.com
        registrantPhone: "+1.1234567890"
        registrantStreet: 123 Main St
        registrantCity: San Francisco
        registrantStateProvince: CA
        registrantPostalCode: "94105"
        registrantCountry: US
        registrar: GoDaddy.com, LLC
        registrarWhoisServer: whois.godaddy.com
        registrarAbuseContactEmail: abuse@godaddy.com
        registrarAbuseContactPhone: "+1.4805058800"
        reseller: GoDaddy
        createdAt: "2024-03-20T10:00:00.000Z"
        updatedAt: "2024-03-20T10:00:00.000Z"
    CreateMonitoringProfile:
      type: object
      properties:
        url:
          type: string
          format: uri
        httpStatusChecks:
          type: boolean
          default: true
        timeoutSeconds:
          type: number
          default: 5
        intervalSeconds:
          type: number
          default: 30
        healthyThresholdCount:
          type: number
          default: 3
        unhealthyThresholdCount:
          type: number
          default: 5
        domainExpiryCheck:
          type: boolean
          default: false
        sslExpiryCheck:
          type: boolean
          default: false
        contentChangeDetection:
          type: boolean
          default: false
        description:
          type: string
        tags:
          type: array
          items:
            type: string
      required:
        - url
        - tags
      description: Input schema for creating a new monitoring profile
      example:
        url: https://example.com
        description: My Company Website Monitor
        tags:
          - production
          - website
        intervalSeconds: 30
        timeoutSeconds: 5
        healthyThresholdCount: 3
        unhealthyThresholdCount: 5
    UpdateMonitoringProfile:
      type: object
      properties:
        url:
          type: string
          format: uri
        httpStatusChecks:
          type: boolean
          default: true
        timeoutSeconds:
          type: number
          default: 5
        intervalSeconds:
          type: number
          default: 30
        healthyThresholdCount:
          type: number
          default: 3
        unhealthyThresholdCount:
          type: number
          default: 5
        domainExpiryCheck:
          type: boolean
          default: false
        sslExpiryCheck:
          type: boolean
          default: false
        contentChangeDetection:
          type: boolean
          default: false
        description:
          type: string
        tags:
          type: array
          items:
            type: string
      description: Input schema for updating a monitoring profile
    PlomerNotification:
      type: object
      properties:
        id:
          type: integer
        accountId:
          type: integer
        text:
          type: string
        type:
          type: string
          enum:
            - DOMAIN_EXPIRY
            - SSL_EXPIRY
            - WEBSITE_DOWN
            - CONTENT_CHANGE
            - SYSTEM
        read:
          type: boolean
          default: false
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - accountId
        - text
        - type
        - read
        - createdAt
        - updatedAt
      description: PlomerNotification represents a system message or alert for a user
      example:
        id: 1
        accountId: 1
        text: Your domain example.com will expire in 30 days
        type: DOMAIN_EXPIRY
        read: false
        createdAt: "2024-03-20T10:00:00.000Z"
        updatedAt: "2024-03-20T10:00:00.000Z"
    UptimeItem:
      type: object
      properties:
        accountId:
          type: integer
        date:
          type: string
        failedRequests:
          type: integer
        monitoringProfileId:
          type: integer
        p95:
          type: number
        successful:
          type: integer
        total:
          type: integer
      required:
        - accountId
        - failedRequests
        - monitoringProfileId
        - p95
        - successful
        - total
      description: >-
        UptimeItem represents a monitoring period's uptime statistics for a
        website
      example:
        accountId: 1
        date: "2024-03-20T00:00:00.000Z"
        failedRequests: 2
        monitoringProfileId: 123
        p95: 350
        successful: 98
        total: 100
paths:
  /account/{appleId}:
    get:
      operationId: getAccountWithTokens
      summary: Get account with tokens
      tags:
        - Account
      description: Get account and generate authentication tokens
      parameters:
        - schema:
            type: string
          in: path
          name: appleId
          required: true
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountWithTokens"
        "404":
          description: Default Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /account:
    post:
      operationId: createAccount
      summary: Create account
      tags:
        - Account
      description: Create account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                appleId:
                  type: string
                email:
                  type: string
                  format: email
                name:
                  type: string
                enablePushNotifications:
                  type: boolean
                  default: false
                identityToken:
                  type: string
                  nullable: true
                authCode:
                  type: string
                  nullable: true
              required:
                - appleId
                - email
                - name
                - identityToken
                - authCode
        required: true
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
  /account/refresh-token:
    post:
      operationId: refreshTokens
      summary: Refresh authentication tokens
      tags:
        - Account
      description: Generate new access and refresh tokens using a refresh token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
              required:
                - refreshToken
        required: true
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "401":
          description: Default Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /account/add-macos-push-token:
    post:
      operationId: addMacOsPushToken
      summary: Add macOS push token
      tags:
        - Account
      description: Add macOS push token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
                - token
        required: true
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
        "401":
          description: Default Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Default Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collection:
    get:
      operationId: getCollections
      summary: Get collections
      tags:
        - Collection
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Collection"
    post:
      operationId: createCollection
      summary: Create collection
      tags:
        - Collection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCollection"
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
  /collection/{id}:
    get:
      operationId: getCollection
      summary: Get collection with profiles
      tags:
        - Collection
      parameters:
        - schema:
            type: number
          in: path
          name: id
          required: true
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/CollectionWithProfiles"
                  - type: "null"
    patch:
      operationId: updateCollection
      summary: Update collection
      tags:
        - Collection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCollection"
      parameters:
        - schema:
            type: number
          in: path
          name: id
          required: true
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
    delete:
      operationId: deleteCollection
      summary: Delete collection
      tags:
        - Collection
      parameters:
        - schema:
            type: number
          in: path
          name: id
          required: true
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
  /collection/{id}/profiles/{profileId}:
    post:
      operationId: addProfileToCollection
      summary: Add monitoring profile to collection
      tags:
        - Collection
      parameters:
        - schema:
            type: number
          in: path
          name: id
          required: true
        - schema:
            type: number
          in: path
          name: profileId
          required: true
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
    delete:
      operationId: removeProfileFromCollection
      summary: Remove monitoring profile from collection
      tags:
        - Collection
      parameters:
        - schema:
            type: number
          in: path
          name: id
          required: true
        - schema:
            type: number
          in: path
          name: profileId
          required: true
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
  /monitoring-profile:
    get:
      operationId: getMonitoringProfiles
      summary: Get monitoring profiles
      tags:
        - MonitoringProfile
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MonitoringProfile"
    post:
      operationId: createMonitoringProfile
      summary: Create monitoring profile
      tags:
        - MonitoringProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMonitoringProfile"
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitoringProfile"
  /monitoring-profile/{id}:
    get:
      operationId: getMonitoringProfile
      summary: Get monitoring profile
      tags:
        - MonitoringProfile
      parameters:
        - schema:
            type: number
          in: path
          name: id
          required: true
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitoringProfile"
    patch:
      operationId: updateMonitoringProfile
      summary: Update monitoring profile
      tags:
        - MonitoringProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMonitoringProfile"
      parameters:
        - schema:
            type: number
          in: path
          name: id
          required: true
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitoringProfile"
    delete:
      operationId: deleteMonitoringProfile
      summary: Delete monitoring profile
      tags:
        - MonitoringProfile
      parameters:
        - schema:
            type: number
          in: path
          name: id
          required: true
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
  /monitoring-profile/{id}/registrar-data:
    get:
      operationId: getMonitoringProfileRegistrarData
      summary: Get monitoring profile registrar data
      tags:
        - MonitoringProfile
      parameters:
        - schema:
            type: number
          in: path
          name: id
          required: true
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistrarData"
  /notification:
    get:
      operationId: getNotifications
      summary: Get notifications
      tags:
        - PlomerNotification
      parameters:
        - schema:
            type: number
            default: 10
          in: query
          name: limit
        - schema:
            type: number
            default: 0
          in: query
          name: page
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/PlomerNotification"
                  pagination:
                    type: object
                    properties:
                      page:
                        type: number
                      totalPages:
                        type: number
                      totalItems:
                        type: number
                      hasMore:
                        type: boolean
                    required:
                      - page
                      - totalPages
                      - totalItems
                      - hasMore
                required:
                  - data
                  - pagination
  /notification/{id}:
    get:
      operationId: getNotification
      summary: Get notification
      tags:
        - PlomerNotification
      parameters:
        - schema:
            type: number
          in: path
          name: id
          required: true
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlomerNotification"
    delete:
      operationId: deleteNotification
      summary: Delete notification
      tags:
        - PlomerNotification
      parameters:
        - schema:
            type: number
          in: path
          name: id
          required: true
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
    patch:
      operationId: updateNotification
      summary: Update notification
      tags:
        - Notification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                read:
                  type: boolean
              required:
                - read
        required: true
      parameters:
        - schema:
            type: number
          in: path
          name: id
          required: true
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlomerNotification"
  /uptime:
    get:
      operationId: getUptime
      summary: Get uptime
      tags:
        - Uptime
      parameters:
        - schema:
            type: number
          in: query
          name: monitoringProfileId
          required: true
        - schema:
            type: number
          in: query
          name: days
        - schema:
            type: string
            enum:
              - hour
              - day
            default: day
          in: query
          name: granularity
      responses:
        "200":
          description: Default Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UptimeItem"
servers:
  - url: http://localhost:3000
    description: local server
  - url: https://devapi.plomer.app
    description: development server
  - url: https://api.plomer.app
    description: production server
security:
  - bearerAuth: []

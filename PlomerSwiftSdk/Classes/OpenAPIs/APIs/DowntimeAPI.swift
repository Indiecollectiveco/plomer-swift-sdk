//
// DowntimeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DowntimeAPI {

    /**
     Get active downtime incidents
     
     - parameter monitoringProfileId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func getActiveDowntimeIncidents(monitoringProfileId: Double? = nil, apiResponseQueue: DispatchQueue = PlomerSwiftSdkAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[DowntimeIncident], ErrorResponse>) -> Void)) -> RequestTask {
        return getActiveDowntimeIncidentsWithRequestBuilder(monitoringProfileId: monitoringProfileId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get active downtime incidents
     - GET /downtime/active
     - API Key:
       - type: apiKey ApiKey (HEADER)
       - name: apiKey
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter monitoringProfileId: (query)  (optional)
     - returns: RequestBuilder<[DowntimeIncident]> 
     */
    open class func getActiveDowntimeIncidentsWithRequestBuilder(monitoringProfileId: Double? = nil) -> RequestBuilder<[DowntimeIncident]> {
        let localVariablePath = "/downtime/active"
        let localVariableURLString = PlomerSwiftSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "monitoringProfileId": (wrappedValue: monitoringProfileId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[DowntimeIncident]>.Type = PlomerSwiftSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get downtime incidents
     
     - parameter monitoringProfileId: (query)  (optional)
     - parameter startDate: (query)  (optional)
     - parameter endDate: (query)  (optional)
     - parameter includeResolved: (query)  (optional, default to "true")
     - parameter limit: (query)  (optional, default to 50)
     - parameter offset: (query)  (optional, default to 0)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func getDowntimeIncidents(monitoringProfileId: String? = nil, startDate: Date? = nil, endDate: Date? = nil, includeResolved: String? = nil, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = PlomerSwiftSdkAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<GetDowntimeIncidents200Response, ErrorResponse>) -> Void)) -> RequestTask {
        return getDowntimeIncidentsWithRequestBuilder(monitoringProfileId: monitoringProfileId, startDate: startDate, endDate: endDate, includeResolved: includeResolved, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get downtime incidents
     - GET /downtime/incidents
     - API Key:
       - type: apiKey ApiKey (HEADER)
       - name: apiKey
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter monitoringProfileId: (query)  (optional)
     - parameter startDate: (query)  (optional)
     - parameter endDate: (query)  (optional)
     - parameter includeResolved: (query)  (optional, default to "true")
     - parameter limit: (query)  (optional, default to 50)
     - parameter offset: (query)  (optional, default to 0)
     - returns: RequestBuilder<GetDowntimeIncidents200Response> 
     */
    open class func getDowntimeIncidentsWithRequestBuilder(monitoringProfileId: String? = nil, startDate: Date? = nil, endDate: Date? = nil, includeResolved: String? = nil, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<GetDowntimeIncidents200Response> {
        let localVariablePath = "/downtime/incidents"
        let localVariableURLString = PlomerSwiftSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "monitoringProfileId": (wrappedValue: monitoringProfileId?.encodeToJSON(), isExplode: true),
            "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
            "includeResolved": (wrappedValue: includeResolved?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetDowntimeIncidents200Response>.Type = PlomerSwiftSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get downtime statistics
     
     - parameter monitoringProfileId: (query)  (optional)
     - parameter days: (query)  (optional, default to 30)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func getDowntimeStats(monitoringProfileId: Double? = nil, days: Double? = nil, apiResponseQueue: DispatchQueue = PlomerSwiftSdkAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<DowntimeStats, ErrorResponse>) -> Void)) -> RequestTask {
        return getDowntimeStatsWithRequestBuilder(monitoringProfileId: monitoringProfileId, days: days).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get downtime statistics
     - GET /downtime/stats
     - API Key:
       - type: apiKey ApiKey (HEADER)
       - name: apiKey
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter monitoringProfileId: (query)  (optional)
     - parameter days: (query)  (optional, default to 30)
     - returns: RequestBuilder<DowntimeStats> 
     */
    open class func getDowntimeStatsWithRequestBuilder(monitoringProfileId: Double? = nil, days: Double? = nil) -> RequestBuilder<DowntimeStats> {
        let localVariablePath = "/downtime/stats"
        let localVariableURLString = PlomerSwiftSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "monitoringProfileId": (wrappedValue: monitoringProfileId?.encodeToJSON(), isExplode: true),
            "days": (wrappedValue: days?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DowntimeStats>.Type = PlomerSwiftSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}

//
// MonitoringProfileAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MonitoringProfileAPI {

    /**
     Create monitoring profile
     
     - parameter accountId: (query)  
     - parameter createMonitoringProfile: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func createMonitoringProfile(accountId: Double, createMonitoringProfile: CreateMonitoringProfile? = nil, apiResponseQueue: DispatchQueue = PlomerSwiftSdkAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<MonitoringProfile, ErrorResponse>) -> Void)) -> RequestTask {
        return createMonitoringProfileWithRequestBuilder(accountId: accountId, createMonitoringProfile: createMonitoringProfile).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create monitoring profile
     - POST /monitoring-profile
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter accountId: (query)  
     - parameter createMonitoringProfile: (body)  (optional)
     - returns: RequestBuilder<MonitoringProfile> 
     */
    open class func createMonitoringProfileWithRequestBuilder(accountId: Double, createMonitoringProfile: CreateMonitoringProfile? = nil) -> RequestBuilder<MonitoringProfile> {
        let localVariablePath = "/monitoring-profile"
        let localVariableURLString = PlomerSwiftSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createMonitoringProfile)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "accountId": (wrappedValue: accountId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MonitoringProfile>.Type = PlomerSwiftSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete monitoring profile
     
     - parameter accountId: (query)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func deleteMonitoringProfile(accountId: Double, id: Double, apiResponseQueue: DispatchQueue = PlomerSwiftSdkAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<DeleteMonitoringProfile200Response, ErrorResponse>) -> Void)) -> RequestTask {
        return deleteMonitoringProfileWithRequestBuilder(accountId: accountId, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Delete monitoring profile
     - DELETE /monitoring-profile/{id}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter accountId: (query)  
     - parameter id: (path)  
     - returns: RequestBuilder<DeleteMonitoringProfile200Response> 
     */
    open class func deleteMonitoringProfileWithRequestBuilder(accountId: Double, id: Double) -> RequestBuilder<DeleteMonitoringProfile200Response> {
        var localVariablePath = "/monitoring-profile/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = PlomerSwiftSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "accountId": (wrappedValue: accountId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeleteMonitoringProfile200Response>.Type = PlomerSwiftSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get monitoring profile
     
     - parameter accountId: (query)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func getMonitoringProfile(accountId: Double, id: Double, apiResponseQueue: DispatchQueue = PlomerSwiftSdkAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<MonitoringProfile, ErrorResponse>) -> Void)) -> RequestTask {
        return getMonitoringProfileWithRequestBuilder(accountId: accountId, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get monitoring profile
     - GET /monitoring-profile/{id}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter accountId: (query)  
     - parameter id: (path)  
     - returns: RequestBuilder<MonitoringProfile> 
     */
    open class func getMonitoringProfileWithRequestBuilder(accountId: Double, id: Double) -> RequestBuilder<MonitoringProfile> {
        var localVariablePath = "/monitoring-profile/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = PlomerSwiftSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "accountId": (wrappedValue: accountId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MonitoringProfile>.Type = PlomerSwiftSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get monitoring profile registrar data
     
     - parameter accountId: (query)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func getMonitoringProfileRegistrarData(accountId: Double, id: Double, apiResponseQueue: DispatchQueue = PlomerSwiftSdkAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<RegistrarData, ErrorResponse>) -> Void)) -> RequestTask {
        return getMonitoringProfileRegistrarDataWithRequestBuilder(accountId: accountId, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get monitoring profile registrar data
     - GET /monitoring-profile/{id}/registrar-data
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter accountId: (query)  
     - parameter id: (path)  
     - returns: RequestBuilder<RegistrarData> 
     */
    open class func getMonitoringProfileRegistrarDataWithRequestBuilder(accountId: Double, id: Double) -> RequestBuilder<RegistrarData> {
        var localVariablePath = "/monitoring-profile/{id}/registrar-data"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = PlomerSwiftSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "accountId": (wrappedValue: accountId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RegistrarData>.Type = PlomerSwiftSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get monitoring profiles
     
     - parameter accountId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func getMonitoringProfiles(accountId: Double, apiResponseQueue: DispatchQueue = PlomerSwiftSdkAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[MonitoringProfile], ErrorResponse>) -> Void)) -> RequestTask {
        return getMonitoringProfilesWithRequestBuilder(accountId: accountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get monitoring profiles
     - GET /monitoring-profile
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter accountId: (query)  
     - returns: RequestBuilder<[MonitoringProfile]> 
     */
    open class func getMonitoringProfilesWithRequestBuilder(accountId: Double) -> RequestBuilder<[MonitoringProfile]> {
        let localVariablePath = "/monitoring-profile"
        let localVariableURLString = PlomerSwiftSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "accountId": (wrappedValue: accountId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MonitoringProfile]>.Type = PlomerSwiftSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update monitoring profile
     
     - parameter accountId: (query)  
     - parameter id: (path)  
     - parameter updateMonitoringProfile: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func updateMonitoringProfile(accountId: Double, id: Double, updateMonitoringProfile: UpdateMonitoringProfile? = nil, apiResponseQueue: DispatchQueue = PlomerSwiftSdkAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<MonitoringProfile, ErrorResponse>) -> Void)) -> RequestTask {
        return updateMonitoringProfileWithRequestBuilder(accountId: accountId, id: id, updateMonitoringProfile: updateMonitoringProfile).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Update monitoring profile
     - PATCH /monitoring-profile/{id}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter accountId: (query)  
     - parameter id: (path)  
     - parameter updateMonitoringProfile: (body)  (optional)
     - returns: RequestBuilder<MonitoringProfile> 
     */
    open class func updateMonitoringProfileWithRequestBuilder(accountId: Double, id: Double, updateMonitoringProfile: UpdateMonitoringProfile? = nil) -> RequestBuilder<MonitoringProfile> {
        var localVariablePath = "/monitoring-profile/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = PlomerSwiftSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateMonitoringProfile)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "accountId": (wrappedValue: accountId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MonitoringProfile>.Type = PlomerSwiftSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}

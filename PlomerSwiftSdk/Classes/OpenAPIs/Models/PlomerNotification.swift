//
// PlomerNotification.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Plomer Notification represents a system message or alert for a user */
public struct PlomerNotification: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case domainExpiry = "DOMAIN_EXPIRY"
        case sslExpiry = "SSL_EXPIRY"
        case websiteDown = "WEBSITE_DOWN"
        case contentChange = "CONTENT_CHANGE"
        case system = "SYSTEM"
    }
    public var id: Int
    public var accountId: Int
    public var monitoringProfileId: Int?
    public var text: String
    public var source: String?
    public var type: ModelType
    public var read: Bool = false
    public var createdAt: String
    public var updatedAt: String

    public init(id: Int, accountId: Int, monitoringProfileId: Int? = nil, text: String, source: String? = nil, type: ModelType, read: Bool = false, createdAt: String, updatedAt: String) {
        self.id = id
        self.accountId = accountId
        self.monitoringProfileId = monitoringProfileId
        self.text = text
        self.source = source
        self.type = type
        self.read = read
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case accountId
        case monitoringProfileId
        case text
        case source
        case type
        case read
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(accountId, forKey: .accountId)
        try container.encodeIfPresent(monitoringProfileId, forKey: .monitoringProfileId)
        try container.encode(text, forKey: .text)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encode(type, forKey: .type)
        try container.encode(read, forKey: .read)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension PlomerNotification: Identifiable {}

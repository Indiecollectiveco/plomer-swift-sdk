//
// DowntimeIncident.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Downtime incident */
public struct DowntimeIncident: Codable, JSONEncodable, Hashable {

    public var id: Double
    public var accountId: Double
    public var monitoringProfileId: Double
    public var startedAt: String
    public var restoredAt: String?
    public var isResolved: Bool
    public var notificationSent: Bool
    public var restorationNotificationSent: Bool
    public var createdAt: String
    public var updatedAt: String

    public init(id: Double, accountId: Double, monitoringProfileId: Double, startedAt: String, restoredAt: String?, isResolved: Bool, notificationSent: Bool, restorationNotificationSent: Bool, createdAt: String, updatedAt: String) {
        self.id = id
        self.accountId = accountId
        self.monitoringProfileId = monitoringProfileId
        self.startedAt = startedAt
        self.restoredAt = restoredAt
        self.isResolved = isResolved
        self.notificationSent = notificationSent
        self.restorationNotificationSent = restorationNotificationSent
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case accountId
        case monitoringProfileId
        case startedAt
        case restoredAt
        case isResolved
        case notificationSent
        case restorationNotificationSent
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(monitoringProfileId, forKey: .monitoringProfileId)
        try container.encode(startedAt, forKey: .startedAt)
        try container.encode(restoredAt, forKey: .restoredAt)
        try container.encode(isResolved, forKey: .isResolved)
        try container.encode(notificationSent, forKey: .notificationSent)
        try container.encode(restorationNotificationSent, forKey: .restorationNotificationSent)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

